// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IERC721 {
    function transferFrom(address from, address to, uint256 tokenId) external;
    function ownerOf(uint256 tokenId) external view returns (address);
}

abstract contract ReentrancyGuard {
    uint256 private _status;

    constructor() {
        _status = 1;
    }

    modifier nonReentrant() {
        require(_status != 2, "ReentrancyGuard: reentrant call");
        _status = 2;
        _;
        _status = 1;
    }
}

contract NFTMarketplace is ReentrancyGuard {
    struct Listing {
        address seller;
        uint256 price;
    }

    mapping(address => mapping(uint256 => Listing)) public listings;

    event NFTListed(address indexed nftAddress, uint256 indexed tokenId, address seller, uint256 price);
    event NFTPurchased(address indexed nftAddress, uint256 indexed tokenId, address buyer, uint256 price);
    event NFTListingCancelled(address indexed nftAddress, uint256 indexed tokenId);
    event NFTPriceUpdated(address indexed nftAddress, uint256 indexed tokenId, uint256 newPrice);

    modifier onlySeller(address nftAddress, uint256 tokenId) {
        require(listings[nftAddress][tokenId].seller == msg.sender, "Not the seller");
        _;
    }

    modifier isListed(address nftAddress, uint256 tokenId) {
        require(listings[nftAddress][tokenId].seller != address(0), "NFT not listed");
        _;
    }

    function listNFT(address nftAddress, uint256 tokenId, uint256 price) external {
        require(price > 0, "Price must be greater than zero");
        IERC721(nftAddress).transferFrom(msg.sender, address(this), tokenId);
        listings[nftAddress][tokenId] = Listing(msg.sender, price);
        emit NFTListed(nftAddress, tokenId, msg.sender, price);
    }

    function purchaseNFT(address nftAddress, uint256 tokenId) external payable nonReentrant isListed(nftAddress, tokenId) {
        Listing memory item = listings[nftAddress][tokenId];
        require(msg.value >= item.price, "Insufficient payment");

        delete listings[nftAddress][tokenId];

        payable(item.seller).transfer(item.price);

        // Refund excess payment
        if (msg.value > item.price) {
            payable(msg.sender).transfer(msg.value - item.price);
        }

        IERC721(nftAddress).transferFrom(address(this), msg.sender, tokenId);
        emit NFTPurchased(nftAddress, tokenId, msg.sender, item.price);
    }

    function cancelListing(address nftAddress, uint256 tokenId) external onlySeller(nftAddress, tokenId) {
        delete listings[nftAddress][tokenId];
        IERC721(nftAddress).transferFrom(address(this), msg.sender, tokenId);
        emit NFTListingCancelled(nftAddress, tokenId);
    }

    function updateListingPrice(address nftAddress, uint256 tokenId, uint256 newPrice) external onlySeller(nftAddress, tokenId) {
        require(newPrice > 0, "Price must be greater than zero");
        listings[nftAddress][tokenId].price = newPrice;
        emit NFTPriceUpdated(nftAddress, tokenId, newPrice);
    }

    function getListing(address nftAddress, uint256 tokenId) external view returns (Listing memory) {
        return listings[nftAddress][tokenId];
    }
}
